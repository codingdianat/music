#include <iostream>
#include <string>
#include <cctype>
#include <assert.h>
using namespace std;



char convertNote(int octave, char noteLetter, char accidentalSign)
{
      // This check is here solely to report a common CS 31 student error.
    if (octave > 9)
    {
        cerr << "********** convertNote was called with first argument = "
             << octave << endl;
    }

      // Convert Cb, C, C#/Db, D, D#/Eb, ..., B, B#
      //      to -1, 0,   1,   2,   3, ...,  11, 12

    int note;
    switch (noteLetter)
    {
      case 'C':  note =  0; break;
      case 'D':  note =  2; break;
      case 'E':  note =  4; break;
      case 'F':  note =  5; break;
      case 'G':  note =  7; break;
      case 'A':  note =  9; break;
      case 'B':  note = 11; break;
      default:   return ' ';
    }
    switch (accidentalSign)
    {
      case '#':  note++; break;
      case 'b':  note--; break;
      case ' ':  break;
      default:   return ' ';
    }

      // Convert ..., A#1, B1, C2, C#2, D2, ... to
      //         ..., -2,  -1, 0,   1,  2, ...

    int sequenceNumber = 12 * (octave - 2) + note;

    string keymap = "1!2@34$5%6^78*9(0qQwWeErtTyYuiIoOpPasSdDfgGhHjJklLzZxcCvVbBnm";
    if (sequenceNumber < 0  ||  sequenceNumber >= keymap.size())
        return ' ';
    return keymap[sequenceNumber];
}

//bool trueNoteLetter(char s){
//    return s>='A' && s<='G';
//}

bool trueAccidental(char accurate){
    if (accurate == '#' || accurate == 'b'){
        return true;
    }
    return false;
}

bool hasdigit(char numero){
   if( isdigit(numero))
   {
    return true;
   }
return false;
}

bool hasCorrectForm (string song)
{
    //check that the first and last char are accurate
    //makes it ok to have nothin

    if (song.length() == 0)
    {
        return true;
    }
   
    
    int size = 0;
    
    while (size < song.size())  //continue
    {
        char first = song.at(size);

    if (first >= 'A' && first <= 'G')
    {
        size++; //1
        char second = song.at(size);
        
        if (trueAccidental(second))
        {
            size++;  //2
            char third = song.at(size);
            // get back to it
            //can be tik or digit or error
            if (hasdigit(third))
            {
                size++;
                continue; //  come back
               
            }
          
            else
            {
              
                continue;
            }
        }
       
        else if (hasdigit(second))
        {
            size++;
            continue;
        }
        
        else if (second == '/')
        {
           
            continue;
        }
        
      
    }
        
        
    else if(song.at(size) == '/')
        {
            if (song.size() == (size+1)){
                return true;
            }
            else
            {
                size++;
                continue;
            }
        }
        
            
        
        else
        {
            return false;
        }
       
    }
    
    return false;
}

int main()
{
    assert(hasCorrectForm("D5//D/"));
    assert(!hasCorrectForm("D5//Z/"));
    assert(hasCorrectForm("G/"));
    assert(hasCorrectForm("A3C#E//E//F#3A3D4/A3C#E/"));
    assert(hasCorrectForm("////"));
    assert(!hasCorrectForm("A3C#E//E//O#3A3D4/A3C#E/"));
    assert(!hasCorrectForm("D5//ZM/"));
    assert(hasCorrectForm("G3B3DD5//G/A/A3B/C5/B3D5//G//G//CE5//C5/D5/E5/F#5/B3G5//G//G/"));
    assert(!hasCorrectForm("D3/F#3/A3/D4//D-F#3A3D4/"));
    
    
                        
    string instrs;
    int badb;
    instrs = "xxx"; badb = -999; // so we can detect whether these get changed
   /* assert(convertSong("D5//D/", instrs, badb) == 0  &&  instrs == "d y"  &&  badb == -999);
    instrs = "xxx"; badb = -999; // so we can detect whether these get changed
    assert(convertSong("D5//Z/", instrs, badb) == 1  &&  instrs == "xxx"  &&  badb == -999);
    assert(convertSong("D5//D8/", instrs, badb) == 2  &&  instrs == "xxx"  &&  badb == 3);
    â€¦*/
    cerr << "All tests succeeded" << endl;
    
    
}
