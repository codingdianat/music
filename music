#include <iostream>
#include <string>
#include <cctype>
#include <assert.h>
using namespace std;

char convertNote(int octave, char noteLetter, char accidentalSign)
{
      // This check is here solely to report a common CS 31 student error.
    if (octave > 9)
    {
        cerr << "********** convertNote was called with first argument = "
             << octave << endl;
    }

      // Convert Cb, C, C#/Db, D, D#/Eb, ..., B, B#
      //      to -1, 0,   1,   2,   3, ...,  11, 12

    int note;
    switch (noteLetter)
    {
      case 'C':  note =  0; break;
      case 'D':  note =  2; break;
      case 'E':  note =  4; break;
      case 'F':  note =  5; break;
      case 'G':  note =  7; break;
      case 'A':  note =  9; break;
      case 'B':  note = 11; break;
      default:   return ' ';
    }
    switch (accidentalSign)
    {
      case '#':  note++; break;
      case 'b':  note--; break;
      case ' ':  break;
      default:   return ' ';
    }

      // Convert ..., A#1, B1, C2, C#2, D2, ... to
      //         ..., -2,  -1, 0,   1,  2, ...

    int sequenceNumber = 12 * (octave - 2) + note;

    string keymap = "1!2@34$5%6^78*9(0qQwWeErtTyYuiIoOpPasSdDfgGhHjJklLzZxcCvVbBnm";
    if (sequenceNumber < 0  ||  sequenceNumber >= keymap.size())
        return ' ';
    return keymap[sequenceNumber];
}

//bool trueNoteLetter(char s){
//    return s>='A' && s<='G';
//}

bool trueAccidental(char accurate){
    if (accurate == '#' || accurate == 'b'){
        return true;
    }
    return false;
}

bool hasCorrectForm (string song) {
    //check that the first and last char are accurate
    
    int first = song.at(0);
  //  char check = song.at(i);
   // for (int i = 0; i != song.size(); i++ ){
       // char spaces = (song.at(i)=' ');

       
  //  }
    //check for correct start
    if (first == '#' || first == 'b' || islower(first) || isdigit(first)){
        cerr<<"incorrect end or start"<<endl;
        return false;
    }
    
    //check that all input characters are accurate
    for (int i = 0; i != song.size(); i++ ){
        //int first = song.at(0);
        char check = song.at(i);
       
        //makes it ok to have only spaces
        if (song.at(0) == ' '){
            if (check != song.at(0)){
                break;
            }
            else{
                return true;
            }
        }
        
        //check that it always ends with tik
        if (song.at(song.size()-1) !='/'){
            cerr<<"incorrect end or start"<<endl;
            return false;
        }
        
        //check that inputed characters are allowed
        if (!isdigit(check) && check != 'C' && check != 'D' && check != 'E' && check != 'F' && check != 'G' && check != 'A' && check != 'B' && check != '/' &&  check != 'b' && check != '#' && check !=' '){
            cerr<< "Contains unusable character";
            return false;
        }
       //to make sure that every char after an accidental is a letter
        if (trueAccidental(check) && !(isalpha(song.at(i-1)))) {
        
            cerr<<"cant have accidental at first";
          return false;
            
        }
      }
       return true;
    }
        //check that note is in right order
  
    
    
int convertSong(string song, string& instructions, int& badTick){
    
}
}
                    
/*int convertSong(string song, string& instructions, int& badTick){
    if ()
    return 0;
}
*/

int main(){

assert(hasCorrectForm("D5//D/"));
assert(!hasCorrectForm("D5//Z/"));
string instrs;
int badb;
instrs = "xxx"; badb = -999; // so we can detect whether these get changed
assert(convertSong("D5//D/", instrs, badb) == 0  &&  instrs == "d y"  &&  badb == -999);
instrs = "xxx"; badb = -999; // so we can detect whether these get changed
assert(convertSong("D5//Z/", instrs, badb) == 1  &&  instrs == "xxx"  &&  badb == -999);
assert(convertSong("D5//D8/", instrs, badb) == 2  &&  instrs == "xxx"  &&  badb == 3);

cerr << "All tests succeeded" << endl;
//if statement convert song return 0, return 2,
//


string songNotes;
getline(cin,songNotes);
if ( hasCorrectForm(songNotes)){
    convertSong(songNotes);
    
/*  if (hasCorrectForm()= false)
{
    cout<<"ohno";
}
else
{
    cout<<"nooo";
}*/
}
            
}

